/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp qmltuner.xml -p qmldbusproxy.h:qmldbusproxy.cpp
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QMLDBUSPROXY_H_1374683684
#define QMLDBUSPROXY_H_1374683684

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "qmltunertypes.h"

/*
 * Proxy class for interface com.luxoft.qmltuner
 */
class ComLuxoftQmltunerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.luxoft.qmltuner"; }

public:
    ComLuxoftQmltunerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComLuxoftQmltunerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply< ItemNotation > describeItem(const QString &address)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(address);
        return asyncCallWithArgumentList(QLatin1String("describeItem"), argumentList);
    }

    inline QDBusPendingReply< QVector<ItemNotation> > enumerateItems()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("enumerateItems"), argumentList);
    }

    inline QDBusPendingReply<bool> setProperty(const QString &itemAddress, const QString &property, const QString &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(itemAddress) << QVariant::fromValue(property) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("setProperty"), argumentList);
    }

    inline QDBusPendingReply<bool> highlight(const QString &itemAddress)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(itemAddress);
        return asyncCallWithArgumentList(QLatin1String("highlight"), argumentList);
    }
    inline QDBusPendingReply<bool> showTarget(const QString &pathToFile, double opacity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(pathToFile) << QVariant::fromValue(opacity);
        return asyncCallWithArgumentList(QLatin1String("showTarget"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace luxoft {
    typedef ::ComLuxoftQmltunerInterface qmltuner;
  }
}
#endif
